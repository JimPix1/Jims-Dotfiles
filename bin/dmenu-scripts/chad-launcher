#!/bin/sh
# Written by JimPix

# Select a game to play using dmenu

# Forbid using Chad Launcher with sudo or as a root user
[ "$(id -u)" = "0" ] && echo "Don't use sudo or root user to run Chad Launcher!" && exit 1

# Cd into the directory containing your games (change if different)
cd "$XDG_DATA_HOME/games" || exit 1

# Find how many lines long the list of games must be
# If the number of games isn't an integer then add one extra line
if echo "$(exa -D | wc -l)/4" | bc -l | grep '\.[1-9]'; then
    LINES="$(echo "$(exa -D | wc -l)/4+1" | bc)"
else
    LINES="$(echo "$(exa -D | wc -l)/4" | bc)"
fi

# Show the list of playable games in dmenu
game="$(exa -D --no-icons | sed 's/\./ /g' | \
	dmenu -l "$LINES" -1 -i -fn mono-10 -g 4 -o 1 -p 'Choose game:')" || exit

# The directory name of the chosen game (i.e periods in-between words instead of spaces)
gamedir="$(echo "$game" | sed 's/ /\./g')"; choice="$(echo "$game" | sed 's/ /\./g')"

# Find the correct start script to use
if [ -e "$(ls "$gamedir"/*start*)" ]; then
	RUN="$(ls "$gamedir"/*start*)" || exit 1
# If the chosen game entry contains multiple games, search for start scripts in those game directories instead
   elif [ -n "$(ls "$gamedir"/*/*start*)" ]; then
	game="$(exa -D --no-icons "$gamedir" | sed 's/\./ /g' | dmenu -1 -i -l 37 -fn mono-10 -o 1 -p 'Select game:')" || exit
	choice="$(echo "$game" | sed 's/ /\./g')"; gamedir="$gamedir"/"$choice"
	RUN="$(ls "$gamedir"/*start*)" || exit 1
# Exit if no start scripts are found and send a notification
else notify-send "üö´ No start scripts found!" && exit 1
fi

# Options for when you select a game
if [ -d "$gamedir"/files ]; then
   if [ -d "$gamedir"/files/data ]; then
      # If the game data ([GAME]/files/data) is found give an option to move it to ~/.cache
      answer="$(printf "Quit\nStart\nOpen in lf\nMove Data\nCopy Game\nMove Game\nDelete Game" | dmenu -fn mono-10 -1 -i -p "Start $game?")" || exit
   # If no game data is found in [GAME]/files/data give the option to return it from ~/.cache (if it exists)
   else answer="$(printf "Quit\nStart\nOpen in lf\nReturn Data\nCopy Game\nMove Game\nDelete Game" | dmenu -fn mono-10 -1 -i -p "Start $game?")" || exit
   fi
# If the game isn't a new 1337 release and doesn't use isolation, use this prompt instead
else answer="$(printf "Quit\nStart\nOpen in lf\nCopy Game\nMove Game\nDelete Game" | dmenu -fn mono-10 -1 -i -p "Start $game?")" || exit
fi
	# Start the game and send a notification to tell you it's starting
        if [ "$answer" = "Start" ]; then
           notify-send "üéÆ Starting Game:" '<b><span foreground="yellow">üíª '"$game"'</span></b>' # Send a notification
           SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0 vblank_mode=0 "$RUN" && exit 0 # Run the game and exit

	# Open the game directory in lf (file manager)
        elif [ "$answer" = "Open in lf" ]; then
	   "$TERMINAL" -e lfrun "$gamedir" && exit 0

	# Move the save data of the chosen game to ~/.cache (only works with new 1337 releases)
	elif [ "$answer" = "Move Data" ]; then
             mvdata="$(printf "Don't move\nMove game data" | dmenu -fn mono-10 -1 -i -p "Move $game data to $XDG_CACHE_HOME?")" || exit
             if [ "$mvdata" = "Move game data" ]; then
	        cd "$gamedir"/files || exit 1
	        mv -f data "$XDG_CACHE_HOME"/"$choice"-Data # Move the data
	        notify-send "üì¶ Moved successfully!" 'üéÆ Data of <b><span foreground="magenta">'"$game"'</span></b>' && exit 0
	     else notify-send "‚ùå $game data not copied" && exit 1
	     fi

	# Move the chosen game's data in ~/.cache back to the game directory
	elif [ "$answer" = "Return Data" ]; then
	     cd "$gamedir"/files || exit 1
 	     if [ -d "$XDG_CACHE_HOME"/"$choice"-Data ]; then
	        mv -f "$XDG_CACHE_HOME"/"$choice"-Data data # Return the data
		notify-send "üîÑ Returned successfully!" 'üéÆ Data of <b><span foreground="blue">'"$game"'</span></b>' && exit 0
 	     else notify-send "üö´ Data not found" 'No <b><span foreground="red">'"$choice"'-Data</span></b> directory found in <span foreground="teal">'"$XDG_CACHE_HOME"'</span>' && exit 1
	     fi

	# Copy the game directory to ~/.cache
	elif [ "$answer" = "Copy Game" ]; then
             cpgame="$(printf "Don't copy\nCopy game" | dmenu -fn mono-10 -1 -i -p "Copy $game to $XDG_CACHE_HOME?")" || exit
             if [ "$cpgame" = "Copy game" ]; then
	        cp -R "$gamedir" "$XDG_CACHE_HOME"/"$choice"-Copy # Copy the game
	        notify-send "‚úÖ Copied successfully!" '<b><span foreground="green">üéÆ '"$game"'</span></b>' && exit 0
	     else notify-send "‚ùå $game not copied" && exit 1
	     fi

	# Move the game directory to ~/.cache
	elif [ "$answer" = "Move Game" ]; then
             mvgame="$(printf "Don't move\nMove game" | dmenu -fn mono-10 -1 -i -p "Move $game to $XDG_CACHE_HOME?")" || exit
             if [ "$mvgame" = "Move game" ]; then
	        mv -f "$gamedir" "$XDG_CACHE_HOME"/"$choice"-Orig # Move the game
	        notify-send "üì¶ Moved successfully!" '<b><span foreground="magenta">üéÆ '"$game"'</span></b>' && exit 0
	     else notify-send "‚ùå $game not moved" && exit 1
	     fi

	# Delete the game permanently
	elif [ "$answer" = "Delete Game" ]; then
             delgame="$(printf "Don't delete it!\nDelete the game forever!" | dmenu -fn mono-10 -1 -i -p "Really delete $game permanently?")" || exit
             if [ "$delgame" = "Delete the game forever!" ]; then
                rm -rf "$gamedir" # Delete the game
	        notify-send "üí£ Deleted successfully!" '<b><span foreground="red">üéÆ '"$game"'</span></b> has been deleted' && exit 0
             else notify-send "‚ùå $game not deleted" && exit 1
	     fi

	# If "Quit" is selected after a game is chosen then exit and send a notification
        else
             notify-send -t 2400 "üö´ Game not started:" '<b><span foreground="red">üéÆ '"$game"'</span></b>' && exit 1
        fi
