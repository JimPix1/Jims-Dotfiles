#!/bin/bash

# Translate using Google Translate (through Lingva Translate)
# Dependencies: dmenu, curl, jq

# dm-translate currently supports two translation services, LibreTranslate and Lingva Translate.
# LibreTranslate uses the free software (Expat/MIT licensed) Argos Translate library for translation.
# Lingva Translate uses the Google Translate (dis)service for translation, but this is fully server-side and Google will not see your IP.
# Both are free software services that can be self-hosted.
# If you want more languages (or need a specific language not in the Argos library) you should chose Lingva Translate.
# If you want to get away from Google and/or want a fully free software implementation you should use LibreTranslate.
# The choice is yours...
#translate_service="libre"
translate_service="lingva"
libretranslate_instance="https://libretranslate.de"
lingva_instance="https://lingva.ml"

# Uncomment to manually set the languages dm-translate will show
# LibreTranslate languages:
#   - `curl -Ss "https://libretranslate.de/languages" | jq`
# Lingva Translate languages:
#   - `curl -Ss "https://lingva.ml/api/v1/languages/source" | jq`
# translate_list="manual"
# declare -A lang_map
# lang_map[Spanish]=es
# lang_map[English]=en
# lang_map[Automatic]=auto

set -euo pipefail

main() {
  # Declare Services and their
  declare -A translate_services
  translate_services[libretranslate]="https://libretranslate.de"
  translate_services[lingva]="https://lingva.ml"

  declare -A translate_languages_url
  translate_languages_url[libretranslate]="https://libretranslate.de/languages"
  translate_languages_url[lingva]="https://lingva.ml/api/v1/languages/source"

  declare -A translate_languages_jq
  translate_languages_jq[libretranslate]="to_entries[] | .value | [.code,.name] | @sh"
  translate_languages_jq[lingva]=".languages | to_entries[] | .value | [.code,.name] | @sh"


  # Sanity checks.

  # Declare lang_map if not in config to populate automatically
  if [[ ! -v lang_map[@] ]]; then
    declare -A lang_map
    translate_list='auto'
  fi

  if [[ ! -v translate_service ]]; then
    echo 'translate_service not defined defaulting to "lingva"'
    declare translate_service="lingva"
  else
    found=0
    for i in "${!translate_services[@]}"; do
      # Check if translate_service is in translate_services
      if [[ "${translate_service}" == "${i}" ]]; then
        found=1
      fi
    done
    if [[ ${found} -eq 0 ]]; then
      echo "Invalid language service ${translate_service}"
      echo "${!translate_services[@]}"
      exit 1
    fi
  fi

  # check variable before lang_map check?
  if [[ "${translate_list:-auto}" != "manual" ]]; then
    local url=${translate_languages_url["${translate_service}"]}
    local jq=${translate_languages_jq["${translate_service}"]}
    mapfile -t data < <(curl -Ss ${url}| jq -cr "${jq}" )
    for ((i=0; i < ${#data[@]}; ++i)); do
      # shellcheck disable=SC2086
      lang_map[$(echo ${data[$i]} | cut -d"'" -f4)]="$(echo ${data[$i]} | cut -d"'" -f2)"
    done
    unset data
  fi

  # Get the languages to translate from and to
  from_name=$(printf '%s\n' "${!lang_map[@]}" | sort | dmenu -i -p 'Translate from:') "$@" || exit 1
  from_code=${lang_map[$from_name]}

  to_name=$(printf '%s\n' "${!lang_map[@]}" | sort | dmenu -i -p 'Translate to:') "$@" || exit 1
  to_code=${lang_map[$to_name]}

  # Get text to translate and url encode
  query=$(echo "" | dmenu -p "Translate (${from_code} -> ${to_code}):")
  query="$(echo "${query}" | jq -s -R -r @uri)"

  declare -A translate_query translate_query_jq translate_method

  translate_method[libretranslate]="POST"
  translate_query[libretranslate]="https://libretranslate.de/translate?q=${query}&source=${from_code}&target=${to_code}"
  translate_query_jq[libretranslate]=".translatedText"

  translate_method[lingva]="GET"
  translate_query[lingva]="https://lingva.ml/api/v1/${from_code}/${to_code}/${query}"
  translate_query_jq[lingva]=".translation"

  translation_url=${translate_query[${translate_service}]}
  translation_jq=${translate_query_jq[${translate_service}]}
  translation_method=${translate_method[${translate_service}]}

  if [[ "${translation_method}" == "POST" ]]; then
    translation=$(curl -X "${translation_method}" -Ss "${translation_url}" | jq -r "${translation_jq}")
  else
    translation=$(curl -Ss "${translation_url}" | jq -r "${translation_jq}")
  fi

  # Copy translation to clipboard and send notification
  echo "${translation}" | xclip -r -selection clipboard
  notify-send "Translation (in clipboard)" "$translation"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
